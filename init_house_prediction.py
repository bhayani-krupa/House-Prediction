# -*- coding: utf-8 -*-
"""init_house_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13T9D-jqJrXjPLyowvFiGOqubcK6P2CVD

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('Dataset.csv')
data.head()

data.shape

data.columns

data.info()

"""**Finding Null Values**"""

missing = data.isnull().sum()
missing.sort_values(inplace=True)
plt.figure(figsize=(12,8))
missing.plot.bar()

null_percent = data.isnull().sum()/data.shape[0]*100
null_percent

useless = null_percent>50
useless[useless]

# dropping values that have more than 50% null values
data.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)

data.shape

"""**Filling the missing values with the mean value**"""

data.fillna(data.mean(), inplace=True)

data.isnull().sum()

data.describe()

"""**Seperating categorical values**"""

cat_data = data.select_dtypes(object)
cat_data.head()

data.drop(columns=cat_data, inplace=True)

data.shape

"""**Converting categorical value into numerical**"""

from sklearn.preprocessing import LabelEncoder
for col in cat_data:
    le = LabelEncoder()
    cat_data[col] = le.fit_transform(cat_data[col])
cat_data.head()

"""**Concatenating both the data**"""

data1 = pd.concat([cat_data, data], axis=1)

data1.head()

"""**Seperating it into dependent and independent variable**"""

X = data1.iloc[:, :-1].values
y = data1.iloc[:, -1].values

"""**Splitting the dataset into training and test set**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state = 0)
regressor.fit(X, y)

"""**Predicting test result**"""

y_pred = regressor.predict(X_test)

np.set_printoptions(precision=2)
np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)